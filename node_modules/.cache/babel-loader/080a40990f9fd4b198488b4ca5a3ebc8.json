{"ast":null,"code":"import { aboutTask } from \"../DAL/dal\";\nimport { TaskCreatedAlert } from \"../components/AlertComponent/AlertComponent\";\nconst CREATE_TASK = 'create-task/reducer/CREATE_TASK';\nconst initialState = {\n  tasks: [{\n    id: \"1\",\n    task: \"Your first task is to add tasks\",\n    time: \" NOW\"\n  }]\n};\nexport const createTaskReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case CREATE_TASK:\n      return { ...state,\n        tasks: action.task\n      };\n\n    default:\n      return state;\n  }\n};\nexport const createTaskAC = task => ({\n  type: CREATE_TASK,\n  task\n});\nexport const createTaskThunk = (task, edited = null) => {\n  return async dispatch => {\n    const response = await aboutTask.postTask(task, edited);\n\n    if (response.status === 200) {\n      await TaskCreatedAlert();\n      dispatch(getTasksThunk());\n    }\n  };\n};\nexport const getTasksThunk = () => {\n  return async dispatch => {\n    const response = await aboutTask.getTask();\n    console.log(response, 'Get');\n    const key = Object.keys(response.data).map(key => {\n      return { ...response.data[key],\n        id: key\n      };\n    });\n\n    if (response.status === 200) {\n      dispatch(createTaskAC(key));\n    }\n  }; // onClick={getTasksThunk() required}\n};\nexport const deleteTaskThunk = id => {\n  return async dispatch => {\n    const response = await aboutTask.deleteTask(id);\n\n    if (response.status === 200) {\n      dispatch(getTasksThunk());\n    }\n  };\n};\nexport const completeTaskThunk = (id, completedTaskDay, completedTaskTime, completed = true) => {\n  return async dispatch => {\n    const response = await aboutTask.doneTasks(id, completedTaskDay, completedTaskTime, completed);\n\n    if (response.status === 200) {\n      dispatch(getTasksThunk());\n    }\n  };\n};","map":{"version":3,"sources":["/home/gurgen/Desktop/new-app/src/store/createTaskReducer.js"],"names":["aboutTask","TaskCreatedAlert","CREATE_TASK","initialState","tasks","id","task","time","createTaskReducer","state","action","type","createTaskAC","createTaskThunk","edited","dispatch","response","postTask","status","getTasksThunk","getTask","console","log","key","Object","keys","data","map","deleteTaskThunk","deleteTask","completeTaskThunk","completedTaskDay","completedTaskTime","completed","doneTasks"],"mappings":"AAAA,SAAQA,SAAR,QAAwB,YAAxB;AACA,SAAQC,gBAAR,QAA+B,6CAA/B;AAEA,MAAMC,WAAW,GAAG,iCAApB;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,KAAK,EAAE,CAAC;AAACC,IAAAA,EAAE,EAAE,GAAL;AAAUC,IAAAA,IAAI,EAAE,iCAAhB;AAAmDC,IAAAA,IAAI,EAAE;AAAzD,GAAD;AADU,CAArB;AAIA,OAAO,MAAMC,iBAAiB,GAAG,CAACC,KAAK,GAACN,YAAP,EAAoBO,MAApB,KAA+B;AAC5D,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKT,WAAL;AACI,aAAO,EACH,GAAGO,KADA;AAEHL,QAAAA,KAAK,EAAEM,MAAM,CAACJ;AAFX,OAAP;;AAIJ;AACI,aAAOG,KAAP;AAPR;AASH,CAVM;AAYP,OAAO,MAAMG,YAAY,GAAIN,IAAD,KAAW;AAACK,EAAAA,IAAI,EAAET,WAAP;AAAoBI,EAAAA;AAApB,CAAX,CAArB;AAEP,OAAO,MAAMO,eAAe,GAAG,CAACP,IAAD,EAAOQ,MAAM,GAAE,IAAf,KAAwB;AACnD,SAAO,MAAOC,QAAP,IAAoB;AACvB,UAAMC,QAAQ,GAAG,MAAMhB,SAAS,CAACiB,QAAV,CAAmBX,IAAnB,EAAwBQ,MAAxB,CAAvB;;AACA,QAAIE,QAAQ,CAACE,MAAT,KAAoB,GAAxB,EAA8B;AAC1B,YAAMjB,gBAAgB,EAAtB;AACAc,MAAAA,QAAQ,CAACI,aAAa,EAAd,CAAR;AACH;AACJ,GAND;AAOH,CARM;AAUP,OAAO,MAAMA,aAAa,GAAI,MAAM;AAChC,SAAO,MAAOJ,QAAP,IAAoB;AACvB,UAAMC,QAAQ,GAAG,MAAMhB,SAAS,CAACoB,OAAV,EAAvB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYN,QAAZ,EAAqB,KAArB;AACI,UAAMO,GAAG,GAAGC,MAAM,CAACC,IAAP,CAAYT,QAAQ,CAACU,IAArB,EAA2BC,GAA3B,CAA+BJ,GAAG,IAAI;AAC9C,aAAO,EACH,GAAGP,QAAQ,CAACU,IAAT,CAAcH,GAAd,CADA;AAEHlB,QAAAA,EAAE,EAAGkB;AAFF,OAAP;AAIH,KALW,CAAZ;;AAMA,QAAIP,QAAQ,CAACE,MAAT,KAAoB,GAAxB,EAA6B;AACzBH,MAAAA,QAAQ,CAACH,YAAY,CAACW,GAAD,CAAb,CAAR;AACH;AAGR,GAdD,CADgC,CAgBhC;AACH,CAjBM;AAmBP,OAAO,MAAMK,eAAe,GAAIvB,EAAD,IAAQ;AACnC,SAAO,MAAOU,QAAP,IAAoB;AACvB,UAAMC,QAAQ,GAAG,MAAMhB,SAAS,CAAC6B,UAAV,CAAqBxB,EAArB,CAAvB;;AACA,QAAIW,QAAQ,CAACE,MAAT,KAAoB,GAAxB,EAA6B;AACzBH,MAAAA,QAAQ,CAACI,aAAa,EAAd,CAAR;AACH;AACJ,GALD;AAMH,CAPM;AASP,OAAO,MAAMW,iBAAiB,GAAG,CAACzB,EAAD,EAAK0B,gBAAL,EAAuBC,iBAAvB,EAA0CC,SAAS,GAAC,IAApD,KAA6D;AAC1F,SAAO,MAAOlB,QAAP,IAAoB;AACvB,UAAMC,QAAQ,GAAG,MAAMhB,SAAS,CAACkC,SAAV,CAAoB7B,EAApB,EAAuB0B,gBAAvB,EAAwCC,iBAAxC,EAA0DC,SAA1D,CAAvB;;AACA,QAAIjB,QAAQ,CAACE,MAAT,KAAoB,GAAxB,EAA6B;AACzBH,MAAAA,QAAQ,CAACI,aAAa,EAAd,CAAR;AACH;AACJ,GALD;AAMH,CAPM","sourcesContent":["import {aboutTask} from \"../DAL/dal\";\nimport {TaskCreatedAlert} from \"../components/AlertComponent/AlertComponent\";\n\nconst CREATE_TASK = 'create-task/reducer/CREATE_TASK';\n\nconst initialState = {\n    tasks: [{id: \"1\", task: \"Your first task is to add tasks\", time: \" NOW\"}]\n}\n\nexport const createTaskReducer = (state=initialState,action) => {\n    switch (action.type) {\n        case CREATE_TASK:\n            return {\n                ...state,\n                tasks: action.task\n            }\n        default:\n            return state\n    }\n}\n\nexport const createTaskAC = (task) => ({type: CREATE_TASK, task })\n\nexport const createTaskThunk = (task, edited= null) => {\n    return async (dispatch) => {\n        const response = await aboutTask.postTask(task,edited)\n        if (response.status === 200 ) {\n            await TaskCreatedAlert()\n            dispatch(getTasksThunk())\n        }\n    }\n}\n\nexport const getTasksThunk =  () => {\n    return async (dispatch) => {\n        const response = await aboutTask.getTask()\n        console.log(response,'Get')\n            const key = Object.keys(response.data).map(key => {\n                return {\n                    ...response.data[key],\n                    id : key,\n                }\n            })\n            if (response.status === 200) {\n                dispatch(createTaskAC(key))\n            }\n        \n\n    }\n    // onClick={getTasksThunk() required}\n}\n\nexport const deleteTaskThunk = (id) => {\n    return async (dispatch) => {\n        const response = await aboutTask.deleteTask(id)\n        if (response.status === 200) {\n            dispatch(getTasksThunk())\n        }\n    }\n}\n\nexport const completeTaskThunk = (id, completedTaskDay, completedTaskTime, completed=true) => {\n    return async (dispatch) => {\n        const response = await aboutTask.doneTasks(id,completedTaskDay,completedTaskTime,completed)\n        if (response.status === 200) {\n            dispatch(getTasksThunk())\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}