{"ast":null,"code":"import { aboutTask } from \"../DAL/dal\";\nconst CREATE_TASK = 'create-task/reducer/CREATE_TASK';\nconst initialState = {\n  tasks: [{\n    day: \"4/20/2020\",\n    id: \"-M5Krk2e9e5Rw7a7hpsE\",\n    task: \"asdasdasdasd\",\n    time: \"8:35:45 AM\"\n  }]\n};\nexport const createTaskReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case CREATE_TASK:\n      return { ...state,\n        tasks: action.task\n      };\n\n    default:\n      return state;\n  }\n};\nexport const createTaskAC = task => ({\n  type: CREATE_TASK,\n  task\n});\nexport const createTaskThunk = (id, task, day, time, edited = null) => {\n  return async dispatch => {\n    const response = await aboutTask.postTask(id, task, day, time, edited);\n  };\n};\nexport const getTasksThunk = () => {\n  return async dispatch => {\n    const response = await aboutTask.getTask();\n    console.log(response.data, 'RESPONSEDATA');\n    const key = Object.keys(response.data).map(key => {\n      return { ...response.data[key],\n        id: key,\n        completedTaskId: { ...response.data.completedTask\n        }\n      };\n    });\n\n    if (response.status === 200) {\n      dispatch(createTaskAC(key));\n    }\n  }; // onClick={getTasksThunk() required}\n};\nexport const deleteTaskThunk = id => {\n  return async dispatch => {\n    const response = await aboutTask.deleteTask(id);\n\n    if (response.status === 200) {\n      dispatch(getTasksThunk());\n    }\n  };\n};\nexport const doneTestsThunk = (id, completedTaskDay, completedTaskTime) => {\n  return async dispatch => {\n    const response = await aboutTask.doneTasks(id, completedTaskDay, completedTaskTime); // const key = Object.keys(response.data).map(key => {\n    //     return {\n    //         ...response.data[key],\n    //         doneTaskId: key\n    //     }\n    // })\n    // if (response.status === 200) {\n    //     dispatch(createTaskAC(key))\n    // }\n  };\n};","map":{"version":3,"sources":["/home/gurgen/Desktop/new-app/src/store/createTaskReducer.js"],"names":["aboutTask","CREATE_TASK","initialState","tasks","day","id","task","time","createTaskReducer","state","action","type","createTaskAC","createTaskThunk","edited","dispatch","response","postTask","getTasksThunk","getTask","console","log","data","key","Object","keys","map","completedTaskId","completedTask","status","deleteTaskThunk","deleteTask","doneTestsThunk","completedTaskDay","completedTaskTime","doneTasks"],"mappings":"AAAA,SAAQA,SAAR,QAAwB,YAAxB;AAEA,MAAMC,WAAW,GAAG,iCAApB;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,KAAK,EAAE,CAAC;AAACC,IAAAA,GAAG,EAAE,WAAN;AAAmBC,IAAAA,EAAE,EAAE,sBAAvB;AAA+CC,IAAAA,IAAI,EAAE,cAArD;AAAqEC,IAAAA,IAAI,EAAE;AAA3E,GAAD;AADU,CAArB;AAIA,OAAO,MAAMC,iBAAiB,GAAG,CAACC,KAAK,GAACP,YAAP,EAAoBQ,MAApB,KAA+B;AAC5D,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKV,WAAL;AACI,aAAO,EACH,GAAGQ,KADA;AAEHN,QAAAA,KAAK,EAAEO,MAAM,CAACJ;AAFX,OAAP;;AAIJ;AACI,aAAOG,KAAP;AAPR;AASH,CAVM;AAYP,OAAO,MAAMG,YAAY,GAAIN,IAAD,KAAW;AAACK,EAAAA,IAAI,EAAEV,WAAP;AAAoBK,EAAAA;AAApB,CAAX,CAArB;AAEP,OAAO,MAAMO,eAAe,GAAG,CAACR,EAAD,EAAIC,IAAJ,EAASF,GAAT,EAAaG,IAAb,EAAmBO,MAAM,GAAE,IAA3B,KAAoC;AAC/D,SAAO,MAAOC,QAAP,IAAoB;AACvB,UAAMC,QAAQ,GAAG,MAAMhB,SAAS,CAACiB,QAAV,CAAmBZ,EAAnB,EAAsBC,IAAtB,EAA2BF,GAA3B,EAA+BG,IAA/B,EAAoCO,MAApC,CAAvB;AACH,GAFD;AAGH,CAJM;AAMP,OAAO,MAAMI,aAAa,GAAI,MAAM;AAEhC,SAAO,MAAOH,QAAP,IAAoB;AACvB,UAAMC,QAAQ,GAAG,MAAMhB,SAAS,CAACmB,OAAV,EAAvB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYL,QAAQ,CAACM,IAArB,EAA0B,cAA1B;AACA,UAAMC,GAAG,GAAGC,MAAM,CAACC,IAAP,CAAYT,QAAQ,CAACM,IAArB,EAA2BI,GAA3B,CAA+BH,GAAG,IAAI;AAC9C,aAAO,EACH,GAAGP,QAAQ,CAACM,IAAT,CAAcC,GAAd,CADA;AAEHlB,QAAAA,EAAE,EAAGkB,GAFF;AAGHI,QAAAA,eAAe,EAAE,EAAC,GAAGX,QAAQ,CAACM,IAAT,CAAcM;AAAlB;AAHd,OAAP;AAKH,KANW,CAAZ;;AAOA,QAAIZ,QAAQ,CAACa,MAAT,KAAoB,GAAxB,EAA6B;AACzBd,MAAAA,QAAQ,CAACH,YAAY,CAACW,GAAD,CAAb,CAAR;AACH;AACJ,GAbD,CAFgC,CAgBhC;AACH,CAjBM;AAmBP,OAAO,MAAMO,eAAe,GAAIzB,EAAD,IAAQ;AACnC,SAAO,MAAOU,QAAP,IAAoB;AACvB,UAAMC,QAAQ,GAAG,MAAMhB,SAAS,CAAC+B,UAAV,CAAqB1B,EAArB,CAAvB;;AACA,QAAIW,QAAQ,CAACa,MAAT,KAAoB,GAAxB,EAA6B;AACzBd,MAAAA,QAAQ,CAACG,aAAa,EAAd,CAAR;AACH;AACJ,GALD;AAMH,CAPM;AASP,OAAO,MAAMc,cAAc,GAAG,CAAC3B,EAAD,EAAI4B,gBAAJ,EAAqBC,iBAArB,KAA2C;AACrE,SAAO,MAAOnB,QAAP,IAAoB;AACvB,UAAMC,QAAQ,GAAG,MAAMhB,SAAS,CAACmC,SAAV,CAAoB9B,EAApB,EAAuB4B,gBAAvB,EAAwCC,iBAAxC,CAAvB,CADuB,CAEvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH,GAXD;AAYH,CAbM","sourcesContent":["import {aboutTask} from \"../DAL/dal\";\n\nconst CREATE_TASK = 'create-task/reducer/CREATE_TASK';\n\nconst initialState = {\n    tasks: [{day: \"4/20/2020\", id: \"-M5Krk2e9e5Rw7a7hpsE\", task: \"asdasdasdasd\", time: \"8:35:45 AM\"}]\n}\n\nexport const createTaskReducer = (state=initialState,action) => {\n    switch (action.type) {\n        case CREATE_TASK:\n            return {\n                ...state,\n                tasks: action.task\n            }\n        default:\n            return state\n    }\n}\n\nexport const createTaskAC = (task) => ({type: CREATE_TASK, task })\n\nexport const createTaskThunk = (id,task,day,time, edited= null) => {\n    return async (dispatch) => {\n        const response = await aboutTask.postTask(id,task,day,time,edited)\n    }\n}\n\nexport const getTasksThunk =  () => {\n\n    return async (dispatch) => {\n        const response = await aboutTask.getTask()\n        console.log(response.data,'RESPONSEDATA')\n        const key = Object.keys(response.data).map(key => {\n            return {\n                ...response.data[key],\n                id : key,\n                completedTaskId: {...response.data.completedTask}\n            }\n        })\n        if (response.status === 200) {\n            dispatch(createTaskAC(key))\n        }\n    }\n    // onClick={getTasksThunk() required}\n}\n\nexport const deleteTaskThunk = (id) => {\n    return async (dispatch) => {\n        const response = await aboutTask.deleteTask(id)\n        if (response.status === 200) {\n            dispatch(getTasksThunk())\n        }\n    }\n}\n\nexport const doneTestsThunk = (id,completedTaskDay,completedTaskTime) => {\n    return async (dispatch) => {\n        const response = await aboutTask.doneTasks(id,completedTaskDay,completedTaskTime)\n        // const key = Object.keys(response.data).map(key => {\n        //     return {\n        //         ...response.data[key],\n        //         doneTaskId: key\n        //     }\n        // })\n        // if (response.status === 200) {\n        //     dispatch(createTaskAC(key))\n        // }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}