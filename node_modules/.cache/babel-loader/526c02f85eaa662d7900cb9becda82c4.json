{"ast":null,"code":"import { aboutTask } from \"../DAL/dal\";\nimport { TaskCreatedAlert } from \"../components/AlertComponent/AlertComponent\";\nconst CREATE_TASK = 'create-task/reducer/CREATE_TASK';\nconst initialState = null;\nexport const createTaskReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case CREATE_TASK:\n      return { ...state,\n        tasks: action.task\n      };\n\n    default:\n      return state;\n  }\n};\nexport const createTaskAC = task => ({\n  type: CREATE_TASK,\n  task\n});\nexport const createTaskThunk = (task, edited = null) => {\n  return async dispatch => {\n    const response = await aboutTask.postTask(task, edited);\n\n    if (response.status === 200) {\n      await TaskCreatedAlert();\n      dispatch(getTasksThunk());\n    }\n  };\n};\nexport const getTasksThunk = () => {\n  return async dispatch => {\n    const response = await aboutTask.getTask();\n    console.log(response);\n\n    if (response.status === 200) {\n      const key = Object.keys(response.data).map(key => {\n        return { ...response.data[key],\n          id: key\n        };\n      });\n      dispatch(createTaskAC(key));\n    }\n  }; // onClick={getTasksThunk() required}\n};\nexport const deleteTaskThunk = id => {\n  return async dispatch => {\n    const response = await aboutTask.deleteTask(id);\n\n    if (response.status === 200) {\n      dispatch(getTasksThunk());\n    }\n  };\n};\nexport const completeTaskThunk = (id, completedTaskDay, completedTaskTime, completed = true) => {\n  return async dispatch => {\n    const response = await aboutTask.doneTasks(id, completedTaskDay, completedTaskTime, completed);\n\n    if (response.status === 200) {\n      dispatch(getTasksThunk());\n    }\n  };\n};","map":{"version":3,"sources":["/home/gurgen/Desktop/new-app/src/store/createTaskReducer.js"],"names":["aboutTask","TaskCreatedAlert","CREATE_TASK","initialState","createTaskReducer","state","action","type","tasks","task","createTaskAC","createTaskThunk","edited","dispatch","response","postTask","status","getTasksThunk","getTask","console","log","key","Object","keys","data","map","id","deleteTaskThunk","deleteTask","completeTaskThunk","completedTaskDay","completedTaskTime","completed","doneTasks"],"mappings":"AAAA,SAAQA,SAAR,QAAwB,YAAxB;AACA,SAAQC,gBAAR,QAA+B,6CAA/B;AAEA,MAAMC,WAAW,GAAG,iCAApB;AAEA,MAAMC,YAAY,GAAG,IAArB;AAEA,OAAO,MAAMC,iBAAiB,GAAG,CAACC,KAAK,GAACF,YAAP,EAAoBG,MAApB,KAA+B;AAC5D,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKL,WAAL;AACI,aAAO,EACH,GAAGG,KADA;AAEHG,QAAAA,KAAK,EAAEF,MAAM,CAACG;AAFX,OAAP;;AAIJ;AACI,aAAOJ,KAAP;AAPR;AASH,CAVM;AAYP,OAAO,MAAMK,YAAY,GAAID,IAAD,KAAW;AAACF,EAAAA,IAAI,EAAEL,WAAP;AAAoBO,EAAAA;AAApB,CAAX,CAArB;AAEP,OAAO,MAAME,eAAe,GAAG,CAACF,IAAD,EAAOG,MAAM,GAAE,IAAf,KAAwB;AACnD,SAAO,MAAOC,QAAP,IAAoB;AACvB,UAAMC,QAAQ,GAAG,MAAMd,SAAS,CAACe,QAAV,CAAmBN,IAAnB,EAAwBG,MAAxB,CAAvB;;AACA,QAAIE,QAAQ,CAACE,MAAT,KAAoB,GAAxB,EAA8B;AAC1B,YAAMf,gBAAgB,EAAtB;AACAY,MAAAA,QAAQ,CAACI,aAAa,EAAd,CAAR;AACH;AACJ,GAND;AAOH,CARM;AAUP,OAAO,MAAMA,aAAa,GAAI,MAAM;AAChC,SAAO,MAAOJ,QAAP,IAAoB;AACvB,UAAMC,QAAQ,GAAG,MAAMd,SAAS,CAACkB,OAAV,EAAvB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYN,QAAZ;;AAGI,QAAIA,QAAQ,CAACE,MAAT,KAAoB,GAAxB,EAA6B;AACzB,YAAMK,GAAG,GAAGC,MAAM,CAACC,IAAP,CAAYT,QAAQ,CAACU,IAArB,EAA2BC,GAA3B,CAA+BJ,GAAG,IAAI;AAC9C,eAAO,EACH,GAAGP,QAAQ,CAACU,IAAT,CAAcH,GAAd,CADA;AAEHK,UAAAA,EAAE,EAAGL;AAFF,SAAP;AAIH,OALW,CAAZ;AAMAR,MAAAA,QAAQ,CAACH,YAAY,CAACW,GAAD,CAAb,CAAR;AAEP;AAEJ,GAhBD,CADgC,CAkBhC;AACH,CAnBM;AAqBP,OAAO,MAAMM,eAAe,GAAID,EAAD,IAAQ;AACnC,SAAO,MAAOb,QAAP,IAAoB;AACvB,UAAMC,QAAQ,GAAG,MAAMd,SAAS,CAAC4B,UAAV,CAAqBF,EAArB,CAAvB;;AACA,QAAIZ,QAAQ,CAACE,MAAT,KAAoB,GAAxB,EAA6B;AACzBH,MAAAA,QAAQ,CAACI,aAAa,EAAd,CAAR;AACH;AACJ,GALD;AAMH,CAPM;AASP,OAAO,MAAMY,iBAAiB,GAAG,CAACH,EAAD,EAAKI,gBAAL,EAAuBC,iBAAvB,EAA0CC,SAAS,GAAC,IAApD,KAA6D;AAC1F,SAAO,MAAOnB,QAAP,IAAoB;AACvB,UAAMC,QAAQ,GAAG,MAAMd,SAAS,CAACiC,SAAV,CAAoBP,EAApB,EAAuBI,gBAAvB,EAAwCC,iBAAxC,EAA0DC,SAA1D,CAAvB;;AACA,QAAIlB,QAAQ,CAACE,MAAT,KAAoB,GAAxB,EAA6B;AACzBH,MAAAA,QAAQ,CAACI,aAAa,EAAd,CAAR;AACH;AACJ,GALD;AAMH,CAPM","sourcesContent":["import {aboutTask} from \"../DAL/dal\";\nimport {TaskCreatedAlert} from \"../components/AlertComponent/AlertComponent\";\n\nconst CREATE_TASK = 'create-task/reducer/CREATE_TASK';\n\nconst initialState = null\n\nexport const createTaskReducer = (state=initialState,action) => {\n    switch (action.type) {\n        case CREATE_TASK:\n            return {\n                ...state,\n                tasks: action.task\n            }\n        default:\n            return state\n    }\n}\n\nexport const createTaskAC = (task) => ({type: CREATE_TASK, task })\n\nexport const createTaskThunk = (task, edited= null) => {\n    return async (dispatch) => {\n        const response = await aboutTask.postTask(task,edited)\n        if (response.status === 200 ) {\n            await TaskCreatedAlert()\n            dispatch(getTasksThunk())\n        }\n    }\n}\n\nexport const getTasksThunk =  () => {\n    return async (dispatch) => {\n        const response = await aboutTask.getTask()\n        console.log(response)\n\n\n            if (response.status === 200) {\n                const key = Object.keys(response.data).map(key => {\n                    return {\n                        ...response.data[key],\n                        id : key,\n                    }\n                })\n                dispatch(createTaskAC(key))\n\n        }\n\n    }\n    // onClick={getTasksThunk() required}\n}\n\nexport const deleteTaskThunk = (id) => {\n    return async (dispatch) => {\n        const response = await aboutTask.deleteTask(id)\n        if (response.status === 200) {\n            dispatch(getTasksThunk())\n        }\n    }\n}\n\nexport const completeTaskThunk = (id, completedTaskDay, completedTaskTime, completed=true) => {\n    return async (dispatch) => {\n        const response = await aboutTask.doneTasks(id,completedTaskDay,completedTaskTime,completed)\n        if (response.status === 200) {\n            dispatch(getTasksThunk())\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}