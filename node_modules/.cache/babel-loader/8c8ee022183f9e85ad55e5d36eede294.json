{"ast":null,"code":"import { aboutTask } from \"../DAL/dal\";\nconst CREATE_TASK = 'create-task/reducer/CREATE_TASK';\nconst initialstate = {\n  tasks: [{\n    id: 1,\n    task: 'create ToDo app'\n  }, {\n    id: 2,\n    task: 'add to hosting'\n  }]\n};\nexport const createTaskReducer = (state = initialstate, action) => {\n  switch (action.type) {\n    case CREATE_TASK:\n      return { ...state,\n        tasks: action.payload // tasks: [...state.tasks, {...action.payload}]\n\n      };\n\n    default:\n      return state;\n  }\n};\nexport const createTaskAC = (id, task) => ({\n  type: CREATE_TASK,\n  payload: {\n    id,\n    task\n  }\n});\nexport const createTaskThunk = (id, task) => {\n  return async dispatch => {\n    const response = await aboutTask.postTask(id, task);\n    const Tasks = response.data.name;\n  };\n};\nexport const test = () => aboutTask.getTask();\nexport const getTasksThunk = () => {\n  return async dispatch => {\n    const response = await aboutTask.getTask(); // dispatch(createTaskAC(response))\n\n    const key = Object.keys(response.data).map(key => {\n      return {\n        name: key.name\n      };\n    }); // const name = key.map(key => key.name);\n\n    console.log(key, 'task');\n    console.log(response.data, 'REDponse');\n  }; // onClick={getTasksThunk() required}\n};","map":{"version":3,"sources":["/home/gurgen/Desktop/new-app/src/store/createTaskReducer.js"],"names":["aboutTask","CREATE_TASK","initialstate","tasks","id","task","createTaskReducer","state","action","type","payload","createTaskAC","createTaskThunk","dispatch","response","postTask","Tasks","data","name","test","getTask","getTasksThunk","key","Object","keys","map","console","log"],"mappings":"AAAA,SAAQA,SAAR,QAAwB,YAAxB;AAEA,MAAMC,WAAW,GAAG,iCAApB;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,KAAK,EAAE,CACH;AAACC,IAAAA,EAAE,EAAC,CAAJ;AAAOC,IAAAA,IAAI,EAAE;AAAb,GADG,EAEH;AAACD,IAAAA,EAAE,EAAC,CAAJ;AAAOC,IAAAA,IAAI,EAAE;AAAb,GAFG;AADU,CAArB;AAOA,OAAO,MAAMC,iBAAiB,GAAG,CAACC,KAAK,GAACL,YAAP,EAAoBM,MAApB,KAA+B;AAC5D,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKR,WAAL;AACI,aAAO,EACH,GAAGM,KADA;AAEHJ,QAAAA,KAAK,EAAEK,MAAM,CAACE,OAFX,CAGH;;AAHG,OAAP;;AAKJ;AACI,aAAOH,KAAP;AARR;AAUH,CAXM;AAcP,OAAO,MAAMI,YAAY,GAAG,CAACP,EAAD,EAAKC,IAAL,MAAe;AAACI,EAAAA,IAAI,EAAER,WAAP;AAAoBS,EAAAA,OAAO,EAAE;AAACN,IAAAA,EAAD;AAAIC,IAAAA;AAAJ;AAA7B,CAAf,CAArB;AAEP,OAAO,MAAMO,eAAe,GAAG,CAACR,EAAD,EAAIC,IAAJ,KAAa;AACxC,SAAO,MAAOQ,QAAP,IAAoB;AACvB,UAAMC,QAAQ,GAAG,MAAMd,SAAS,CAACe,QAAV,CAAmBX,EAAnB,EAAsBC,IAAtB,CAAvB;AACA,UAAMW,KAAK,GAAGF,QAAQ,CAACG,IAAT,CAAcC,IAA5B;AACH,GAHD;AAIH,CALM;AAOP,OAAO,MAAMC,IAAI,GAAG,MAAMnB,SAAS,CAACoB,OAAV,EAAnB;AAEP,OAAO,MAAMC,aAAa,GAAI,MAAM;AAChC,SAAO,MAAOR,QAAP,IAAmB;AACtB,UAAMC,QAAQ,GAAG,MAAMd,SAAS,CAACoB,OAAV,EAAvB,CADsB,CAEtB;;AACA,UAAME,GAAG,GAAGC,MAAM,CAACC,IAAP,CAAYV,QAAQ,CAACG,IAArB,EAA2BQ,GAA3B,CAA+BH,GAAG,IAAI;AAC9C,aAAO;AACHJ,QAAAA,IAAI,EAAEI,GAAG,CAACJ;AADP,OAAP;AAGH,KAJW,CAAZ,CAHsB,CAStB;;AAEAQ,IAAAA,OAAO,CAACC,GAAR,CAAYL,GAAZ,EAAgB,MAAhB;AACAI,IAAAA,OAAO,CAACC,GAAR,CAAYb,QAAQ,CAACG,IAArB,EAA0B,UAA1B;AACH,GAbD,CADgC,CAehC;AACH,CAhBM","sourcesContent":["import {aboutTask} from \"../DAL/dal\";\n\nconst CREATE_TASK = 'create-task/reducer/CREATE_TASK';\n\nconst initialstate = {\n    tasks: [\n        {id:1, task: 'create ToDo app'},\n        {id:2, task: 'add to hosting'},\n    ]\n}\n\nexport const createTaskReducer = (state=initialstate,action) => {\n    switch (action.type) {\n        case CREATE_TASK:\n            return {\n                ...state,\n                tasks: action.payload\n                // tasks: [...state.tasks, {...action.payload}]\n            }\n        default:\n            return state\n    }\n}\n\n\nexport const createTaskAC = (id, task) => ({type: CREATE_TASK, payload: {id,task} })\n\nexport const createTaskThunk = (id,task) => {\n    return async (dispatch) => {\n        const response = await aboutTask.postTask(id,task)\n        const Tasks = response.data.name\n    }\n}\n\nexport const test = () => aboutTask.getTask()\n\nexport const getTasksThunk =  () => {\n    return async (dispatch)=> {\n        const response = await aboutTask.getTask()\n        // dispatch(createTaskAC(response))\n        const key = Object.keys(response.data).map(key => {\n            return {\n                name: key.name,\n            }\n        })\n\n        // const name = key.map(key => key.name);\n\n        console.log(key,'task')\n        console.log(response.data,'REDponse')\n    }\n    // onClick={getTasksThunk() required}\n}\n\n"]},"metadata":{},"sourceType":"module"}