{"ast":null,"code":"import { aboutTask } from \"../DAL/dal\";\nconst CREATE_TASK = 'create-task/reducer/CREATE_TASK';\nconst initialState = {\n  tasks: [{\n    day: \"4/20/2020\",\n    id: \"-M5Krk2e9e5Rw7a7hpsE\",\n    task: \"asdasdasdasd\",\n    time: \"8:35:45 AM\"\n  }]\n};\nexport const createTaskReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case CREATE_TASK:\n      return { ...state,\n        tasks: action.task\n      };\n\n    default:\n      return state;\n  }\n};\nexport const createTaskAC = task => ({\n  type: CREATE_TASK,\n  task\n});\nexport const createTaskThunk = (id, task, day, time) => {\n  console.log(\"Waiting\");\n  return async dispatch => {\n    console.log(\"RENDER CREATE!!!!\");\n    const response = await aboutTask.postTask(id, task, day, time);\n  };\n};\nexport const getTasksThunk = () => {\n  const res = aboutTask.getTask().then(response => response.data);\n  console.log(res, 'RES'); // console.log(\"RENDER delete test 1\")\n  // return async (dispatch) => {\n  //     console.log(\"RENDER delete test 2\")\n  //     console.log(\"RENDER GETTHUSK\")\n  //     const response = await aboutTask.getTask()\n  //     const key = Object.keys(response.data).map(key => {\n  //         return {\n  //             ...response.data[key],\n  //             id : key\n  //         }\n  //     })\n  //     if (response.status === 200) {\n  //         console.log(key)\n  //         dispatch(createTaskAC(key))\n  //     }\n  // }\n  // onClick={getTasksThunk() required}\n};\nexport const deleteTaskThunk = id => {\n  return async dispatch => {\n    const response = await aboutTask.deleteTask(id);\n    const responseGet = await aboutTask.getTask();\n\n    if (response.status === 200) {\n      console.log(response.status);\n      const key = Object.keys(responseGet.data).map(key => {\n        return { ...responseGet.data[key],\n          id: key\n        };\n      });\n\n      if (responseGet.status === 200) {\n        console.log(responseGet.status, 'STATUS');\n        dispatch(createTaskAC(key));\n      }\n    }\n  };\n};","map":{"version":3,"sources":["/home/gurgen/Desktop/new-app/src/store/createTaskReducer.js"],"names":["aboutTask","CREATE_TASK","initialState","tasks","day","id","task","time","createTaskReducer","state","action","type","createTaskAC","createTaskThunk","console","log","dispatch","response","postTask","getTasksThunk","res","getTask","then","data","deleteTaskThunk","deleteTask","responseGet","status","key","Object","keys","map"],"mappings":"AAAA,SAAQA,SAAR,QAAwB,YAAxB;AAEA,MAAMC,WAAW,GAAG,iCAApB;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,KAAK,EAAE,CAAC;AAACC,IAAAA,GAAG,EAAE,WAAN;AAAmBC,IAAAA,EAAE,EAAE,sBAAvB;AAA+CC,IAAAA,IAAI,EAAE,cAArD;AAAqEC,IAAAA,IAAI,EAAE;AAA3E,GAAD;AADU,CAArB;AAIA,OAAO,MAAMC,iBAAiB,GAAG,CAACC,KAAK,GAACP,YAAP,EAAoBQ,MAApB,KAA+B;AAC5D,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKV,WAAL;AACI,aAAO,EACH,GAAGQ,KADA;AAEHN,QAAAA,KAAK,EAAEO,MAAM,CAACJ;AAFX,OAAP;;AAIJ;AACI,aAAOG,KAAP;AAPR;AASH,CAVM;AAaP,OAAO,MAAMG,YAAY,GAAIN,IAAD,KAAW;AAACK,EAAAA,IAAI,EAAEV,WAAP;AAAoBK,EAAAA;AAApB,CAAX,CAArB;AAEP,OAAO,MAAMO,eAAe,GAAG,CAACR,EAAD,EAAIC,IAAJ,EAASF,GAAT,EAAaG,IAAb,KAAsB;AACjDO,EAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACA,SAAO,MAAOC,QAAP,IAAoB;AACvBF,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACA,UAAME,QAAQ,GAAG,MAAMjB,SAAS,CAACkB,QAAV,CAAmBb,EAAnB,EAAsBC,IAAtB,EAA2BF,GAA3B,EAA+BG,IAA/B,CAAvB;AACH,GAHD;AAIH,CANM;AAQP,OAAO,MAAMY,aAAa,GAAI,MAAM;AAEhC,QAAMC,GAAG,GAAGpB,SAAS,CAACqB,OAAV,GAAoBC,IAApB,CAAyBL,QAAQ,IAAIA,QAAQ,CAACM,IAA9C,CAAZ;AACAT,EAAAA,OAAO,CAACC,GAAR,CAAYK,GAAZ,EAAgB,KAAhB,EAHgC,CAIhC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH,CArBM;AAuBP,OAAO,MAAMI,eAAe,GAAInB,EAAD,IAAQ;AACnC,SAAO,MAAOW,QAAP,IAAoB;AACvB,UAAMC,QAAQ,GAAG,MAAMjB,SAAS,CAACyB,UAAV,CAAqBpB,EAArB,CAAvB;AACA,UAAMqB,WAAW,GAAG,MAAM1B,SAAS,CAACqB,OAAV,EAA1B;;AAEA,QAAIJ,QAAQ,CAACU,MAAT,KAAoB,GAAxB,EAA6B;AACzBb,MAAAA,OAAO,CAACC,GAAR,CAAYE,QAAQ,CAACU,MAArB;AAEA,YAAMC,GAAG,GAAGC,MAAM,CAACC,IAAP,CAAYJ,WAAW,CAACH,IAAxB,EAA8BQ,GAA9B,CAAkCH,GAAG,IAAI;AACjD,eAAO,EACH,GAAGF,WAAW,CAACH,IAAZ,CAAiBK,GAAjB,CADA;AAEHvB,UAAAA,EAAE,EAAGuB;AAFF,SAAP;AAIH,OALW,CAAZ;;AAMA,UAAIF,WAAW,CAACC,MAAZ,KAAuB,GAA3B,EAAgC;AAC5Bb,QAAAA,OAAO,CAACC,GAAR,CAAYW,WAAW,CAACC,MAAxB,EAA+B,QAA/B;AACAX,QAAAA,QAAQ,CAACJ,YAAY,CAACgB,GAAD,CAAb,CAAR;AACH;AACJ;AACJ,GAlBD;AAmBH,CApBM","sourcesContent":["import {aboutTask} from \"../DAL/dal\";\n\nconst CREATE_TASK = 'create-task/reducer/CREATE_TASK';\n\nconst initialState = {\n    tasks: [{day: \"4/20/2020\", id: \"-M5Krk2e9e5Rw7a7hpsE\", task: \"asdasdasdasd\", time: \"8:35:45 AM\"}]\n}\n\nexport const createTaskReducer = (state=initialState,action) => {\n    switch (action.type) {\n        case CREATE_TASK:\n            return {\n                ...state,\n                tasks: action.task\n            }\n        default:\n            return state\n    }\n}\n\n\nexport const createTaskAC = (task) => ({type: CREATE_TASK, task })\n\nexport const createTaskThunk = (id,task,day,time) => {\n    console.log(\"Waiting\")\n    return async (dispatch) => {\n        console.log(\"RENDER CREATE!!!!\")\n        const response = await aboutTask.postTask(id,task,day,time)\n    }\n}\n\nexport const getTasksThunk =  () => {\n\n    const res = aboutTask.getTask().then(response => response.data)\n    console.log(res,'RES')\n    // console.log(\"RENDER delete test 1\")\n    // return async (dispatch) => {\n    //     console.log(\"RENDER delete test 2\")\n    //     console.log(\"RENDER GETTHUSK\")\n    //     const response = await aboutTask.getTask()\n    //     const key = Object.keys(response.data).map(key => {\n    //         return {\n    //             ...response.data[key],\n    //             id : key\n    //         }\n    //     })\n    //     if (response.status === 200) {\n    //         console.log(key)\n    //         dispatch(createTaskAC(key))\n    //     }\n    // }\n    // onClick={getTasksThunk() required}\n}\n\nexport const deleteTaskThunk = (id) => {\n    return async (dispatch) => {\n        const response = await aboutTask.deleteTask(id)\n        const responseGet = await aboutTask.getTask()\n\n        if (response.status === 200) {\n            console.log(response.status)\n\n            const key = Object.keys(responseGet.data).map(key => {\n                return {\n                    ...responseGet.data[key],\n                    id : key\n                }\n            })\n            if (responseGet.status === 200) {\n                console.log(responseGet.status,'STATUS')\n                dispatch(createTaskAC(key))\n            }\n        }\n    }\n}\n\n"]},"metadata":{},"sourceType":"module"}