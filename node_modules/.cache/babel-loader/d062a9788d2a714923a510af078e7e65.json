{"ast":null,"code":"var _jsxFileName = \"/home/gurgen/Desktop/new-app/src/components/TasksList/TasksList.jsx\";\nimport React, { useEffect, useState } from \"react\";\nimport EditTaskInput from \"./EditTaskInput\";\nimport { DoneTask } from \"../doneTask/doneTask\";\nexport const TasksList = ({\n  tasks,\n  deleteTaskThunk,\n  getTasksThunk,\n  inp,\n  inputId,\n  setInputId,\n  createTaskThunk,\n  done,\n  setDone,\n  textLineThroughId,\n  setTextLineThroughId,\n  doneTestsThunk,\n  completedTaskDay,\n  completedTaskTime\n}) => {\n  useEffect(() => {\n    getTasksThunk();\n  }, []);\n  const [editBtnVisible, setEditBtnVisible] = useState(true);\n  const [a, b, ...c] = tasks;\n  const {\n    day,\n    id,\n    task\n  } = a;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"ul\", {\n    className: \"list-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 13\n    }\n  }, tasks.map(task => {\n    if (task.completedTask) {\n      const val = Object.values(task.completedTask);\n      console.log(task.completedTask, val, 'Object Val');\n    }\n\n    return /*#__PURE__*/React.createElement(\"li\", {\n      className: \"list-group-item task-item\",\n      key: task.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 26\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 32\n      }\n    }, inputId === task.id ? /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 44\n      }\n    }, /*#__PURE__*/React.createElement(EditTaskInput, {\n      onSubmit: e => {\n        deleteTaskThunk(task.id);\n        createTaskThunk(task.id, e.editTask, task.day, task.time, true);\n        setEditBtnVisible(!editBtnVisible);\n        setInputId(null);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 46\n      }\n    })) : /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 46\n      }\n    }, /*#__PURE__*/React.createElement(DoneTask, {\n      task: task,\n      done: done,\n      setDone: setDone,\n      textLineThroughId: textLineThroughId,\n      setTextLineThroughId: setTextLineThroughId,\n      doneTestsThunk: doneTestsThunk,\n      completedTaskDay: completedTaskDay,\n      completedTaskTime: completedTaskTime,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 48\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"task-item_data\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 48\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 52\n      }\n    }, \"added-\", task.day), /*#__PURE__*/React.createElement(\"small\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 52\n      }\n    }, task.time)))), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 32\n      }\n    }, editBtnVisible && inputId === task.id ? /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn btn-primary\",\n      onClick: () => {\n        setEditBtnVisible(!editBtnVisible);\n        setInputId(null);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 80\n      }\n    }, \"Back\") : /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn btn-primary\",\n      onClick: () => {\n        inp(task.id);\n        setEditBtnVisible(true);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 41\n      }\n    }, \"Edit\"), /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      className: \"btn btn-danger\",\n      onClick: () => deleteTaskThunk(task.id),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 33\n      }\n    }, \"Remove\")));\n  })));\n};","map":{"version":3,"sources":["/home/gurgen/Desktop/new-app/src/components/TasksList/TasksList.jsx"],"names":["React","useEffect","useState","EditTaskInput","DoneTask","TasksList","tasks","deleteTaskThunk","getTasksThunk","inp","inputId","setInputId","createTaskThunk","done","setDone","textLineThroughId","setTextLineThroughId","doneTestsThunk","completedTaskDay","completedTaskTime","editBtnVisible","setEditBtnVisible","a","b","c","day","id","task","map","completedTask","val","Object","values","console","log","e","editTask","time"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from \"react\";\nimport EditTaskInput from \"./EditTaskInput\";\nimport {DoneTask} from \"../doneTask/doneTask\";\n\nexport const TasksList = (\n    { tasks,deleteTaskThunk,getTasksThunk,inp,inputId,setInputId,\n      createTaskThunk,done,setDone, textLineThroughId,setTextLineThroughId,\n      doneTestsThunk,completedTaskDay,completedTaskTime\n    }) => {\n\n    useEffect(() => {\n        getTasksThunk()\n    },[])\n\n    const [editBtnVisible, setEditBtnVisible] = useState(true)\n\n    const [a,b,...c] = tasks\n    const {day,id,task} = a\n    return(\n        <div>\n            <ul className=\"list-group\">\n              {\n                 tasks.map((task)=> {\n                     if (task.completedTask) {\n                        const val = Object.values(task.completedTask)\n                         console.log(task.completedTask,val, 'Object Val')\n                     }\n                     return (\n                         <li className=\"list-group-item task-item\" key={task.id}>\n                               <div>\n                                   {\n                                       inputId === task.id\n                                           ?\n                                           <div>\n                                             <EditTaskInput  onSubmit = {\n                                               (e) => {\n                                                   deleteTaskThunk(task.id)\n                                                   createTaskThunk(task.id, e.editTask, task.day, task.time, true)\n                                                   setEditBtnVisible(!editBtnVisible)\n                                                   setInputId(null)\n                                               }}\n                                             />\n\n                                           </div>\n                                           : <div>\n                                               <DoneTask\n                                                   task={task}\n                                                   done={done}\n                                                   setDone={setDone}\n                                                   textLineThroughId={textLineThroughId}\n                                                   setTextLineThroughId={setTextLineThroughId}\n                                                   doneTestsThunk={doneTestsThunk}\n                                                   completedTaskDay = {completedTaskDay}\n                                                   completedTaskTime = {completedTaskTime}\n                                               />\n                                               <div className='task-item_data'>\n                                                   <span>added-{task.day}</span>\n                                                   <small>{task.time}</small>\n                                                   {/*<span>{task.completedTask}</span>*/}\n                                               </div>\n\n\n                                             </div>\n                                   }\n\n                               </div>\n\n                               <div>\n                                   {\n                                       editBtnVisible && inputId === task.id ? <button className='btn btn-primary' onClick={ () => {\n                                               setEditBtnVisible(!editBtnVisible);\n                                               setInputId(null);\n                                           }}>Back</button>\n                                       :<button className='btn btn-primary' onClick={() => {\n                                           inp(task.id);\n                                           setEditBtnVisible(true)\n                                       }}>Edit</button>\n                                   }\n                                <button type=\"button\" className=\"btn btn-danger\" onClick={() => deleteTaskThunk(task.id)}>Remove</button>\n                               </div>\n\n                         </li>\n                     )\n                 })\n              }\n            </ul>\n        </div>\n    )\n};"]},"metadata":{},"sourceType":"module"}