{"ast":null,"code":"import { aboutTask } from \"../DAL/dal\";\nconst CREATE_TASK = 'create-task/reducer/CREATE_TASK';\nconst initialState = {\n  tasks: null\n};\nexport const createTaskReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case CREATE_TASK:\n      return { ...state,\n        tasks: action.task\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst getTask = () => {\n  return async dispatch => {\n    console.log(\"RENDER delete test 2\");\n    console.log(\"RENDER GETTHUSK\");\n    const response = await aboutTask.getTask();\n    const key = Object.keys(response.data).map(key => {\n      return { ...response.data[key],\n        id: key\n      };\n    });\n\n    if (response.status === 200) {\n      dispatch(createTaskAC(key));\n    }\n  };\n};\n\nexport const createTaskAC = task => ({\n  type: CREATE_TASK,\n  task\n}); //\n\nexport const createTaskThunk = (id, task, day, time) => {\n  return async dispatch => {\n    console.log(\"RENDER CREATE\");\n    const response = await aboutTask.postTask(id, task, day, time);\n  };\n};\nexport const getTasksThunk = () => {\n  console.log(\"RENDER delete test 1\"); // onClick={getTasksThunk() required}\n};\nexport const deleteTaskThunk = id => {\n  return async dispatch => {\n    const response = await aboutTask.deleteTask(id);\n\n    if (response.status === 200) {\n      const response = await aboutTask.getTask();\n      const key = Object.keys(response.data).map(key => {\n        return { ...response.data[key],\n          id: key\n        };\n      });\n\n      if (response.status === 200) {\n        dispatch(createTaskAC(key));\n      }\n    }\n  };\n};","map":{"version":3,"sources":["/home/gurgen/Desktop/new-app/src/store/createTaskReducer.js"],"names":["aboutTask","CREATE_TASK","initialState","tasks","createTaskReducer","state","action","type","task","getTask","dispatch","console","log","response","key","Object","keys","data","map","id","status","createTaskAC","createTaskThunk","day","time","postTask","getTasksThunk","deleteTaskThunk","deleteTask"],"mappings":"AAAA,SAAQA,SAAR,QAAwB,YAAxB;AAEA,MAAMC,WAAW,GAAG,iCAApB;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,KAAK,EAAE;AADU,CAArB;AAIA,OAAO,MAAMC,iBAAiB,GAAG,CAACC,KAAK,GAACH,YAAP,EAAoBI,MAApB,KAA+B;AAC5D,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKN,WAAL;AACI,aAAO,EACH,GAAGI,KADA;AAEHF,QAAAA,KAAK,EAAEG,MAAM,CAACE;AAFX,OAAP;;AAIJ;AACI,aAAOH,KAAP;AAPR;AASH,CAVM;;AAYP,MAAMI,OAAO,GAAG,MAAM;AAClB,SAAO,MAAOC,QAAP,IAAoB;AACvBC,IAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AAGA,UAAMC,QAAQ,GAAG,MAAMb,SAAS,CAACS,OAAV,EAAvB;AACA,UAAMK,GAAG,GAAGC,MAAM,CAACC,IAAP,CAAYH,QAAQ,CAACI,IAArB,EAA2BC,GAA3B,CAA+BJ,GAAG,IAAI;AAC9C,aAAO,EACH,GAAGD,QAAQ,CAACI,IAAT,CAAcH,GAAd,CADA;AAEHK,QAAAA,EAAE,EAAEL;AAFD,OAAP;AAIH,KALW,CAAZ;;AAMA,QAAID,QAAQ,CAACO,MAAT,KAAoB,GAAxB,EAA6B;AACzBV,MAAAA,QAAQ,CAACW,YAAY,CAACP,GAAD,CAAb,CAAR;AACH;AACJ,GAfD;AAgBH,CAjBD;;AAmBA,OAAO,MAAMO,YAAY,GAAIb,IAAD,KAAW;AAACD,EAAAA,IAAI,EAAEN,WAAP;AAAoBO,EAAAA;AAApB,CAAX,CAArB,C,CACP;;AACA,OAAO,MAAMc,eAAe,GAAG,CAACH,EAAD,EAAIX,IAAJ,EAASe,GAAT,EAAaC,IAAb,KAAsB;AACjD,SAAO,MAAOd,QAAP,IAAoB;AACvBC,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACA,UAAMC,QAAQ,GAAG,MAAMb,SAAS,CAACyB,QAAV,CAAmBN,EAAnB,EAAsBX,IAAtB,EAA2Be,GAA3B,EAA+BC,IAA/B,CAAvB;AACH,GAHD;AAIH,CALM;AAOP,OAAO,MAAME,aAAa,GAAI,MAAM;AAChCf,EAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EADgC,CAGhC;AACH,CAJM;AAMP,OAAO,MAAMe,eAAe,GAAIR,EAAD,IAAQ;AACnC,SAAO,MAAOT,QAAP,IAAoB;AACvB,UAAMG,QAAQ,GAAG,MAAMb,SAAS,CAAC4B,UAAV,CAAqBT,EAArB,CAAvB;;AAEA,QAAIN,QAAQ,CAACO,MAAT,KAAoB,GAAxB,EAA6B;AAEzB,YAAMP,QAAQ,GAAG,MAAMb,SAAS,CAACS,OAAV,EAAvB;AACA,YAAMK,GAAG,GAAGC,MAAM,CAACC,IAAP,CAAYH,QAAQ,CAACI,IAArB,EAA2BC,GAA3B,CAA+BJ,GAAG,IAAI;AAC9C,eAAO,EACH,GAAGD,QAAQ,CAACI,IAAT,CAAcH,GAAd,CADA;AAEHK,UAAAA,EAAE,EAAGL;AAFF,SAAP;AAIH,OALW,CAAZ;;AAMA,UAAID,QAAQ,CAACO,MAAT,KAAoB,GAAxB,EAA6B;AACzBV,QAAAA,QAAQ,CAACW,YAAY,CAACP,GAAD,CAAb,CAAR;AACH;AACJ;AACJ,GAhBD;AAiBH,CAlBM","sourcesContent":["import {aboutTask} from \"../DAL/dal\";\n\nconst CREATE_TASK = 'create-task/reducer/CREATE_TASK';\n\nconst initialState = {\n    tasks: null\n}\n\nexport const createTaskReducer = (state=initialState,action) => {\n    switch (action.type) {\n        case CREATE_TASK:\n            return {\n                ...state,\n                tasks: action.task\n            }\n        default:\n            return state\n    }\n}\n\nconst getTask = () => {\n    return async (dispatch) => {\n        console.log(\"RENDER delete test 2\")\n        console.log(\"RENDER GETTHUSK\")\n\n\n        const response = await aboutTask.getTask()\n        const key = Object.keys(response.data).map(key => {\n            return {\n                ...response.data[key],\n                id: key\n            }\n        })\n        if (response.status === 200) {\n            dispatch(createTaskAC(key))\n        }\n    }\n}\n\nexport const createTaskAC = (task) => ({type: CREATE_TASK, task })\n//\nexport const createTaskThunk = (id,task,day,time) => {\n    return async (dispatch) => {\n        console.log(\"RENDER CREATE\")\n        const response = await aboutTask.postTask(id,task,day,time)\n    }\n}\n\nexport const getTasksThunk =  () => {\n    console.log(\"RENDER delete test 1\")\n\n    // onClick={getTasksThunk() required}\n}\n\nexport const deleteTaskThunk = (id) => {\n    return async (dispatch) => {\n        const response = await aboutTask.deleteTask(id)\n\n        if (response.status === 200) {\n\n            const response = await aboutTask.getTask()\n            const key = Object.keys(response.data).map(key => {\n                return {\n                    ...response.data[key],\n                    id : key\n                }\n            })\n            if (response.status === 200) {\n                dispatch(createTaskAC(key))\n            }\n        }\n    }\n}\n\n"]},"metadata":{},"sourceType":"module"}