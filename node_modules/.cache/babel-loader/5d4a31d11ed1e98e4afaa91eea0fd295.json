{"ast":null,"code":"import { aboutTask } from \"../DAL/dal\";\nimport { TaskCreatedAlert } from \"../components/AlertComponent/AlertComponent\";\nconst CREATE_TASK = 'create-task/reducer/CREATE_TASK';\nconst initialState = {\n  tasks: []\n};\nexport const createTaskReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case CREATE_TASK:\n      return { ...state,\n        tasks: action.task\n      };\n\n    default:\n      return state;\n  }\n};\nexport const createTaskAC = task => ({\n  type: CREATE_TASK,\n  task\n});\nexport const createTaskThunk = (task, edited = null) => {\n  return async dispatch => {\n    const response = await aboutTask.postTask(task, edited);\n\n    if (response.status === 200) {\n      await TaskCreatedAlert();\n      dispatch(getTasksThunk());\n    }\n  };\n};\nexport const getTasksThunk = () => {\n  return async dispatch => {\n    const response = await aboutTask.getTask();\n    console.log(response.data === null, 'DATA');\n\n    if (response.data) {\n      const key = Object.keys(response.data).map(key => {\n        return { ...response.data[key],\n          id: key\n        };\n      });\n\n      if (response.status === 200) {\n        if (key.length >= 7) {\n          dispatch(createTaskAC(key));\n        } else console.log('No more Tasks');\n      }\n    }\n\n    if (!response.data) {\n      const key = [];\n      dispatch(createTaskAC(key));\n    }\n  }; // onClick={getTasksThunk() required}\n};\nexport const deleteTaskThunk = id => {\n  return async dispatch => {\n    const response = await aboutTask.deleteTask(id);\n\n    if (response.status === 200) {\n      dispatch(getTasksThunk());\n    }\n  };\n};\nexport const completeTaskThunk = (id, completedTaskDay, completedTaskTime, completed = true) => {\n  return async dispatch => {\n    const response = await aboutTask.doneTasks(id, completedTaskDay, completedTaskTime, completed);\n\n    if (response.status === 200) {\n      dispatch(getTasksThunk());\n    }\n  };\n};","map":{"version":3,"sources":["/home/gurgen/Desktop/new-app/src/store/createTaskReducer.js"],"names":["aboutTask","TaskCreatedAlert","CREATE_TASK","initialState","tasks","createTaskReducer","state","action","type","task","createTaskAC","createTaskThunk","edited","dispatch","response","postTask","status","getTasksThunk","getTask","console","log","data","key","Object","keys","map","id","length","deleteTaskThunk","deleteTask","completeTaskThunk","completedTaskDay","completedTaskTime","completed","doneTasks"],"mappings":"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","sourcesContent":["import {aboutTask} from \"../DAL/dal\";\nimport {TaskCreatedAlert} from \"../components/AlertComponent/AlertComponent\";\n\nconst CREATE_TASK = 'create-task/reducer/CREATE_TASK';\n\nconst initialState = {\n    tasks: []\n}\n\nexport const createTaskReducer = (state=initialState,action) => {\n    switch (action.type) {\n        case CREATE_TASK:\n            return {\n                ...state,\n                tasks: action.task\n            }\n        default:\n            return state\n    }\n}\n\nexport const createTaskAC = (task) => ({type: CREATE_TASK, task })\n\nexport const createTaskThunk = (task, edited= null) => {\n    return async (dispatch) => {\n        const response = await aboutTask.postTask(task,edited)\n        if (response.status === 200 ) {\n            await TaskCreatedAlert()\n            dispatch(getTasksThunk())\n        }\n    }\n}\n\nexport const getTasksThunk =  () => {\n    return async (dispatch) => {\n        const response = await aboutTask.getTask()\n        console.log(response.data === null, 'DATA')\n        if (response.data) {\n            const key = Object.keys(response.data).map(key => {\n                return {\n                    ...response.data[key],\n                    id : key,\n                }\n            })\n            if (response.status === 200) {\n                if (key.length >= 7) {\n                    dispatch(createTaskAC(key))\n                }else console.log('No more Tasks')\n            }\n        }\n\n        if (!response.data) {\n            const key = []\n            dispatch(createTaskAC(key))\n        }\n    }\n    // onClick={getTasksThunk() required}\n}\n\nexport const deleteTaskThunk = (id) => {\n    return async (dispatch) => {\n        const response = await aboutTask.deleteTask(id)\n        if (response.status === 200) {\n            dispatch(getTasksThunk())\n        }\n    }\n}\n\nexport const completeTaskThunk = (id, completedTaskDay, completedTaskTime, completed=true) => {\n    return async (dispatch) => {\n        const response = await aboutTask.doneTasks(id,completedTaskDay,completedTaskTime,completed)\n        if (response.status === 200) {\n            dispatch(getTasksThunk())\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}